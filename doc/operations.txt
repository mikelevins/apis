Apis operations

defop name param-list &body body
  Defines a new Apis operation.
  
  In the body of an operation, *message* is always bound to the
  envelope+message that is being processed by the operation.

  The macro REPLY sends a value as a message to the originator of
  *message*.

  The macro ERROR-REPLY sends a value as an error message to the
  originator of *message*.

The apis model is that worker state is a tree with labeled nodes, like
a nested plist. Changes to state are represented as a path and a
value; the path represents the sequence of labels you must navigate in
order to reach the changed node; the value represents the new value of
the node. an worker can notify another worker of a change in state by
sending an :update message with the path and value.

An worker can request notifications of change in some state by
subscribing to a channel. A channel represents a set of paths; when
any change occurs in any of the channel's paths, the worker sends
update messages to the subscribers, which may be immediate, local, or
remote. Each available immediate channel is identified by a name (a
keyword) in a list at the path (:channels) on the worker.

An worker can fetch arbitrary state information from another worker by
using the message

  :get <path>

assuming, of course, that the requesting worker is authorized to
request that information at that path. Each worker maintains an
access-control list that maps roles to permissions, and which assigns
roles to all authenticated workers. If an worker requests information
it's not entitled to by its active roles, then the responding worker
sends and error message instead of the requested information.

Similarly, :put enables authorized workers to post updates to paths
belonging to other workers.

The application semantics of data stored on the nodes in an worker's
state tree are up to the particular application to define. By
assigning meaning to particular paths and values, and by defining
procedures to execute in response to updates, an worker can implement
arbitrary semantics.

:get
:login
:logout
:put
:subscribe
:unsubcribe
:update
:version




